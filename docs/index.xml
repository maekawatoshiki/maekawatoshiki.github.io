<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hello</title>
    <link>https://maekawatoshiki.github.io/</link>
    <description>Recent content on Hello</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Wed, 19 May 2021 15:56:20 +0900</lastBuildDate><atom:link href="https://maekawatoshiki.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Google Summer of Code 2021 に参加します</title>
      <link>https://maekawatoshiki.github.io/posts/gsoc1/</link>
      <pubDate>Wed, 19 May 2021 15:56:20 +0900</pubDate>
      
      <guid>https://maekawatoshiki.github.io/posts/gsoc1/</guid>
      <description>TL;DR  Google Summer of Code に提出したProposalが採択されました 晴れてGSoCに参加できることとなりました 参加団体はLLVMです 嬉しい  Google Summer of Codeとは  Google Summer of Code is a global program focused on bringing more student developers into open source software development. Students work with an open source organization on a 10 week programming project during their break from school.
(https://summerofcode.withgoogle.com/)
 Google Summer of Code は、OSSプロジェクトにメンター付きで参加することができ、さらに Google から報酬ももらえるイベントです。 その名の通り夏（休み）に行われるのですが、アメリカ規準であって、日本の大学などでは普通に授業が行われています。 本来であれば、学部2年生の私にとっては参加が少し厳しいはずでしたが、今年は新型コロナの影響でプロジェクトに取り組む時間の制約が緩くなった (40h/w→17h+/w) ので、思い切って参加してみました。(大学もずっとオンラインで、家にこもりっぱなしですし。)
Proposal採択までの流れ 3月の初めから、以下の作業を始めました。
参加団体を選ぶ 公式サイトを見れば、様々な団体がGSoCに参加しているとわかります。 私は、ずっと LLVM に貢献したかったので、無論それを選びました。</description>
    </item>
    
    <item>
      <title>Play with LLVM-IR, without LLVM</title>
      <link>https://maekawatoshiki.github.io/posts/vicis/</link>
      <pubDate>Sun, 02 May 2021 22:04:08 +0900</pubDate>
      
      <guid>https://maekawatoshiki.github.io/posts/vicis/</guid>
      <description>TL;DR LLVMの代替実装をRustで作っています。(ただの趣味)
これを使って LLVM-IR とじゃれ合ってみよう、という記事です。
LLVM-IRに触れる。LLVM抜きで。 インターネットで放浪してたら、このような記事を見つけました。
RustのLLVM IRでプログラム分析ことはじめ - Toshihiro YAMAGUCHI’s Diary
私はこれまでに、rustcの吐くLLVM-IRを直接見たことがほとんどありませんでした。丁度よい機会なので、LLVMの復習がてら記事と同じようなことをしようとしたのですが、ただ真似るだけでは面白くない。
そうだ、LLVMをRustで実装して、同じようなことをしよう
というわけで、趣味として LLVMをRustで再実装し始めました。(Vicisと名付けた) この記事では Vicis を使って、LLVM-IRを、LLVM抜きで触っていきます。
とりあえずプロジェクトを作る 記事の中では、モジュールに含まれる関数を列挙していました。これと同じことをやってみます。
cargo new viewer --bin # viewerというプロジェクトにします プロジェクトを作ったら、Cargo.tomlにVicisを追加しておきましょう。
... [dependencies] vicis = { path = &amp;quot;/path/to/vicis&amp;quot; } IRを読み込む Vicisは現在、LLVM Assemblyの一部にしか対応できていません。(bitcode対応など頑張ります&amp;hellip;)
src/main.rsを以下のように変更します。
use std::{env, fs::read_to_string}; use vicis::ir::module; fn main() { let args: Vec&amp;lt;String&amp;gt; = env::args().collect(); let file = &amp;amp;args[1]; let asm = read_to_string(file).expect(&amp;#34;failed to read .ll file&amp;#34;); let module = module::parse_assembly(asm.</description>
    </item>
    
    <item>
      <title>コンパイラと私</title>
      <link>https://maekawatoshiki.github.io/posts/compilerandi/</link>
      <pubDate>Thu, 29 Apr 2021 22:42:05 +0900</pubDate>
      
      <guid>https://maekawatoshiki.github.io/posts/compilerandi/</guid>
      <description>ここでは、私がどのようにして「コンパイラ」というものを認識し、そして夢中になったのかについて書いていこうと思う。
私が初めてプログラミングを体験したのは小学6年生のころだった。C言語を使って Hello World を画面（ターミナル、そのころは Windows を使っていたからコマンドプロンプトだった）に表示するという、いたって典型的な入門だった。正直あまり面白くなかったし、そもそもキーボードが打てない、ファイルをどこに保存したのかわからない、というレベルだった。
そんなレベルの私がなぜC言語を始めたかというと、もともと簡単な電子工作をしており、次はロボットを動かしたかったからである。C言語以外の言語を知らなかった私は、親に「猫でもわかるC言語プログラミング」を買ってもらい、どうにか Hello World をコンパイルできる程度の環境を構築したというわけだ。
それ以降の小学6年生の記憶はかなり曖昧だが、たしかある程度C言語を使えるようになり、Win32 APIでウィンドウを表示するサンプルが動いて喜んでいたと思う。同時に、「なぜこの英語の文章（＝プログラム）がウィンドウを表示したりできるんだ？」といった純粋な疑問も持っていた。「コンパイラ」という単語はうっすらと認識していたが、どちらかと言えば「コンパイルして実行」のような連続した語として記憶していたため、まだコンパイラというソフトウェア自体にはあまり興味を示していなかったと思う。
中学1年生になると、すっかりロボットを動かすという目標を忘れ、GUIプログラミングを楽しんでいた。 （物理的にも処理速度的にも）重たいパソコン上で Visual Studio を動かし、C言語を書いていた。F5を押せばプログラムは動いた。そこにコンパイラはなく、その存在は統合開発環境が隠蔽していた。 そのうちに HSP (Hot Soup Processor) を知り、簡単に GUI プログラミングができると興奮し、かなりの数のくだらないソフトウェアを作ったと思う。画面キャプチャ、ただファイルをゴミ箱に送るだけのソフト、画面端で常駐する電卓、円周率を計算するやつ&amp;hellip;..
そう、HSP で円周率を計算し始めたことで気づいた。HSP は遅い。C言語は速かったのに。
そのころになってようやく、世の中にはコンパイル型言語とインタプリタ型言語というものがあると知った。いや、知ったというよりは実感したと言うべきだろうか。とにかく、コンパイラというものに惹かれ始めたのは中学1年生のかなり後半だったと思う。ここから、私とコンパイラとの関係が始まったのだと思う。
最初のうちは、Ruby の VM に興味を持っていた。なぜ Ruby なのかはよく覚えていないが、おそらく英語が読めない私にとって、日本語の資料が落ちていたのは魅力的だったのだろう。YARV の内部構造を説明するサイト（たぶんこのあたり）に釘付けだった。この文章を書きながらリンク先を眺めていたが、今見ても面白い。第3回：命令ディスパッチの話は、当時は理解こそできなかったものの、こんなことができるのか！すごい！と興味津々だった。これが中学2年生の初めの話。
インタプリタやコンパイラのことを認識した以上、何らかの言語を作りたくなるのは避けられない。 （実は HSP で電卓を作っていた頃に、小さな言語のようなものは作っていたが、BASIC よりもしょぼい文法で、AST すら知らなかったためぐちゃぐちゃのコードだったと記憶している。もう手元にはコードが残っていない。そのコードが入っている80GB HDDは分解して、ディスクを手裏剣のように投げて遊んでいた。） 今手元に残っている言語処理系で、一番古いものは Lit だ。いつのまにか C++ を覚えたようで、C++ で書いてあるし、なんとご丁寧にGitHubに置いてある。 まったく思い出せないが、どうにかgitやGitHubの使い方を覚えたようである。最初のコミットは中学2年生の夏休み頃となっている。 Lit は Ruby っぽい言語で、なんと JIT コンパイルできる。初期は手動でアセンブラ（と言っても命令に対応する16進数をハードコードしているだけだが）のようなものを書いており、それを使って JIT していたようだ。結局 LLVM を導入してしまったようだが。そもそもどのような経緯でLLVMを知ったのかも思い出せない。
中学3年生になると、ほとんど理解できていなかったと思われるが、Python や Clang を読んでいたような気がする。また、中学生が終わろうとしているときに、CMake があまりにも嫌いで C++ ごと捨ててしまった。同時に Rust を本格的に使い始めた。</description>
    </item>
    
    <item>
      <title>Third</title>
      <link>https://maekawatoshiki.github.io/posts/third/</link>
      <pubDate>Sun, 28 Feb 2021 23:30:39 +0900</pubDate>
      
      <guid>https://maekawatoshiki.github.io/posts/third/</guid>
      <description></description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://maekawatoshiki.github.io/about/</link>
      <pubDate>Sun, 28 Feb 2021 23:27:03 +0900</pubDate>
      
      <guid>https://maekawatoshiki.github.io/about/</guid>
      <description>$ whoami  GitHub: maekawatoshiki (uint256_t) Twitter: uint256_t Student at Nagoya Institute of Technology  $ interests I strongly love systems programming, especially making compilers.
$ projects  (for Japanese) プログラミング言語処理系が好きな人の集まり − owner vicis − An experimental project to clone LLVM in pure Rust naglfar − A toy web browser implementation from scratch in Rust rapidus − JavaScript engine implementation in Rust sericum (renamed from cilk) − An experimental compiler infrastructure  &amp;hellip; and more at GitHub</description>
    </item>
    
    <item>
      <title>Second</title>
      <link>https://maekawatoshiki.github.io/posts/second/</link>
      <pubDate>Sun, 28 Feb 2021 23:26:09 +0900</pubDate>
      
      <guid>https://maekawatoshiki.github.io/posts/second/</guid>
      <description>my second page</description>
    </item>
    
    <item>
      <title>Welcome!!</title>
      <link>https://maekawatoshiki.github.io/posts/welcome/</link>
      <pubDate>Sun, 28 Feb 2021 14:00:00 +0000</pubDate>
      
      <guid>https://maekawatoshiki.github.io/posts/welcome/</guid>
      <description>hello world</description>
    </item>
    
  </channel>
</rss>
