<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hello</title>
    <link>https://maekawatoshiki.github.io/</link>
    <description>Recent content on Hello</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Sat, 28 Dec 2024 22:59:42 +0900</lastBuildDate><atom:link href="https://maekawatoshiki.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>2024</title>
      <link>https://maekawatoshiki.github.io/posts/2024/</link>
      <pubDate>Sat, 28 Dec 2024 22:59:42 +0900</pubDate>
      
      <guid>https://maekawatoshiki.github.io/posts/2024/</guid>
      <description>去年 掲げていた「来年の目標」 大学をなんとか卒業する
卒業できた
「決断」を下せるようになる
微妙。多少は決断できるようになったかもしれないが、結局時間が解決してくれた場合が多い。
将来何をしたいのかを考えるために、より多くの人と関わる
学会等で様々な人と話すことができた
今年 地震かな でか
&amp;mdash; uint256_t (@uint256_t) January 1, 2024 つらかった どうにか走り切らないといけない https://t.co/SuyPopM0xH
&amp;mdash; uint256_t (@uint256_t) January 5, 2024 今年はずっとパイプラインとにらめっこしていた きれい pic.twitter.com/qYyOO9gLKi
&amp;mdash; uint256_t (@uint256_t) January 31, 2024 卒業できたらしい 卒論発表 おわり
ありがとうございました
&amp;mdash; uint256_t (@uint256_t) February 15, 2024 👏 卒業できた pic.twitter.com/1N01QSNGAZ
&amp;mdash; uint256_t (@uint256_t) March 26, 2024 SWoPP 2024 へ行った 来週は SWoPP に参加します.
&amp;mdash; uint256_t (@uint256_t) August 3, 2024 徳島 pic.twitter.com/0u8efprDjk
&amp;mdash; uint256_t (@uint256_t) August 6, 2024 以前の研究会での賞をもらった ARC 研究会 の 若手奨励賞 を頂きました。 pic.</description>
    </item>
    
    <item>
      <title>Tabbyによるコーディング支援を試した</title>
      <link>https://maekawatoshiki.github.io/posts/tabby/</link>
      <pubDate>Fri, 15 Nov 2024 14:58:50 +0900</pubDate>
      
      <guid>https://maekawatoshiki.github.io/posts/tabby/</guid>
      <description>これは，名工大 Advent Calendar 2024 - 3日目の記事です．
長らくこのブログに書き込んでいませんでしたね．2024年が終わってしまいそうです．
はじめに 昨今，GitHub Copilot 等の高度なコーディング支援ツールが普及しつつあります． 私もサービス開始当初から使っていますが，非常に賢いコード補完機能として，もはや手放せないほど手に馴染んでいます．
さて，GitHub Copilot は（ほとんどの人にとって）有料ですから，毎月（毎年）一定の金額を支払う必要があります． 加えて，GitHub の判断によって，明日から使えなくなる可能性もあります． 手放せないツールが突然使えなくなっては困りますよね．
世の中には，似たようなサービスを自らセルフホスティングするためのプロジェクトが存在します． 本記事では，その中でも Tabby というプロジェクトを実際に試してみます．
Tabby とは 以下に，リポジトリから引用した説明を載せておきます． 要約すると，お手元の GPU と Tabby さえあれば，GitHub Copilot に代わるコーディング支援環境を構築できるわけです．
Tabby is a self-hosted AI coding assistant, offering an open-source and on-premises alternative to GitHub Copilot. It boasts several key features:
Self-contained, with no need for a DBMS or cloud service. OpenAPI interface, easy to integrate with existing infrastructure (e.</description>
    </item>
    
    <item>
      <title>2023</title>
      <link>https://maekawatoshiki.github.io/posts/2023/</link>
      <pubDate>Sat, 30 Dec 2023 20:42:47 +0900</pubDate>
      
      <guid>https://maekawatoshiki.github.io/posts/2023/</guid>
      <description>去年 掲げていた「来年の目標」 多少は健康を意識する 意識していたつもりはないが、大きな病気はない。 大学へいけば必然的に~1万歩くらい歩くことになるし。
おそらく大学院に行くための試験があるので頑張る 推薦のおかげで試験を受けなくて済んだ。 それが本当に良かったのかはよくわからない。
研究というものと仲良くなる これは全くダメ。仲良くなれていない。
今年 9年ツイートしているらしい
Do you remember when you joined X? I do!
そうなんだ pic.twitter.com/pwjciaOBdg
&amp;mdash; uint256_t (@uint256_t) August 28, 2023 今年はチューターとしてセキュリティ・キャンプに参加しました
pic.twitter.com/prLTXTTrD9
&amp;mdash; uint256_t (@uint256_t) August 7, 2023 Python から GIL がなくなったら嬉しいよね
GILとも もうすぐさよならなのかしら
&amp;mdash; uint256_t (@uint256_t) July 30, 2023 薄いキーボードが苦手だということにようやく気づき、結局これはあんまり使ってない
持ち運べるやつが欲しかったので。 pic.twitter.com/Aby7Uc8PsE
&amp;mdash; uint256_t (@uint256_t) July 18, 2023 これって今年だったのか
https://t.co/uBdR998kBk
「プログラミング言語処理系が好きな人の集まり」は Slack から Zulip へ移行しました。
&amp;mdash; uint256_t (@uint256_t) June 30, 2023 この頃は SPEC CPU95 を触っていたのかな（今は 2006, 2017 も触っている）</description>
    </item>
    
    <item>
      <title>2022年</title>
      <link>https://maekawatoshiki.github.io/posts/2022/</link>
      <pubDate>Sat, 31 Dec 2022 15:52:23 +0900</pubDate>
      
      <guid>https://maekawatoshiki.github.io/posts/2022/</guid>
      <description>1 月 海からスタート pic.twitter.com/6fkbYD0CER
&amp;mdash; uint256_t (@uint256_t) January 1, 2022 まだ vicis をいじってたのかな Module::try_from(&amp;quot;...llvm assembly...&amp;quot;)って書けるようになってかなり良い
&amp;mdash; uint256_t (@uint256_t) January 30, 2022 2 月 わかる TLを見ていると、CPUからハイパーバイザ、人工衛星あたりまで色々なものが生み出されていてなんかすごい。
&amp;mdash; uint256_t (@uint256_t) February 12, 2022 pull request その理由はGit誕生以前からある用語だからだったと思いますが、もはやGitHub以前の &amp;quot;pull request&amp;quot; という言葉のユースケースを探すことも困難になっているような…。 https://t.co/C6HvMcHw6f
&amp;mdash; FUJI Goro (@__gfx__) February 7, 2022 3 月 いつも同じことを考えている 勉強ってどうやってするんだろう。
&amp;mdash; uint256_t (@uint256_t) March 25, 2022 Asahi Linux お試し Tweet from Asahi Linux! pic.twitter.com/A1rw8iFkuK
&amp;mdash; uint256_t (@uint256_t) March 20, 2022 いつ見ても好き この画像好きhttps://t.</description>
    </item>
    
    <item>
      <title>セキュリティ・キャンプ 2022 参加記（講師視点）</title>
      <link>https://maekawatoshiki.github.io/posts/seccamp2022/</link>
      <pubDate>Sat, 24 Sep 2022 18:14:08 +0900</pubDate>
      
      <guid>https://maekawatoshiki.github.io/posts/seccamp2022/</guid>
      <description>はじめに 私は高校生の時にセキュリティ・キャンプ2018に参加 （参加記, 応募課題） しました。 流行り病のことを考える必要もなく、当たり前のように現地参加していた頃が懐かしいです。 いつの間にか大学生になってしまいました。
大勢が物理的に集まることが難しくなり、セキュリティ・キャンプがオンラインで開催されるようになってから久しいですが、 そんな今年、私は講師として セキュリティ・キャンプ全国大会2022 オンライン という場に帰ってくることができました。
この文章は、あまり見かけることのない「講師視点の参加記」という名目で、 率直な感想や反省などを述べていくものです。 自分の担当したゼミ（Cコンパイラゼミ）の話がほとんどなので、今年のキャンプの概観を知りたいのであれば他の方の記事を読んでみてください。
軽くゼミ紹介 私と hsjoihs さんがCコンパイラゼミの講師を担当しました。 このゼミでは以下のことを目指し、実際にある程度は達成しました。
本ゼミでは、実用的なプログラムをコンパイルできるC言語のコンパイラを開発します。 コンパイラを開発するための言語は問いません。そのため、C言語で開発しても良いですし、 ご自身の慣れ親しんだ言語を使って開発しても構いません。 目標は、C言語で書かれたOSSなどをコンパイルできるCコンパイラを開発し、 余裕があればより高度なものへと改造することです。コンパイラの基本的な要素はもちろん、 高度なコンパイラ最適化やコンピュータ自体についての理解が進むよう、講師が手助けをします。 大会期間前に多くの事前学習が必要となりますが、プログラミング言語やその処理系に関心を持つ皆さんの応募をお待ちしています。
引用元: https://www.ipa.go.jp/jinzai/camp/2022/zenkoku2022_program_list.html#list_s-l3
セキュリティ・キャンプでは、（私の参加した2018年から）Cコンパイラを自作するゼミが開講されていましたが、 2021年は開講されませんでした。2022年に再び開講したことになります。
応募課題 ゼミを開講するにあたっては色々とやることがあります。 特に、応募課題を作り、応募者の方の回答を評価することは重要です。
今年の応募課題は、過去の応募課題と似てはいますが、 応募者ごとに回答の内容に差が生まれやすい（であろう）問題を取り入れました。 （それが何問目なのかは、応募課題を確認していただければわかると思います。）
思惑通り、多種多様な回答をいただき、読んでいる側としても学ぶことが多かったです。 深くは述べませんが（=言っていいのかよくわからない; 確認が取れたら言うかもしれない）、回答の傾向をまとめると以下のようになりました。
質の低い回答（自分の{頭で考えていない, 手を動かして検証していない}回答）は少なかった （私の）想像以上に、（応募者が）普段コンパイラをいじっているのか（or いじっていないのか）が回答から伝わってきた 長すぎる回答はやめよう、とは最初に警告したものの、短い回答（を心掛けた結果内容が当たり障りのないものになってしまう）よりは、 分量があって熱意の伝わってくる回答のほうが、応募者の能力を評価しやすかった e.g. 問題の回答が思いつかなくても、「わからなかった」or それに類することを書くよりは、どこまで調べたのか・どこからがわからないのかを詳しく書いてもらったほうが評価しやすい 圧倒的に質の高い回答を創り出す方というのは本当に存在するのだなぁ、と感心した また、応募課題作成者のひとりとして、この問題はもうちょっと説明を加えるべきだったなぁと気づかせてくれる回答もいくつかありました。 問題を考えるのは難しいですね。
事前学習 応募課題を考えたり選考したりと忙しいですが、まだキャンプは始まってすらいません。 本番期間5日間の前には事前学習期間があり、開発に注力するゼミであればこの期間が非常に重要となります。
Cコンパイラゼミも例外ではありません。 事前学習期間には毎週進捗報告会を開き、受講生の方の進捗を確認したり、バグ取りを手伝ったりなどしました。 基本的には compilerbook や 事前に提供した本 を活用しながら、受講生の方が自主的にコンパイラ開発を進めるという流れだったため、 なるべく作業の手が止まらないように、 非同期なテキストチャットでの質疑応答も積極的に行っていました。
事前学習期間中にセルフホストまで到達した方もおり、 年々自作コンパイラ界隈のレベルが上昇しているなぁと実感しました。 ほんの10年前ならありえないことだったのではないでしょうか。
本番期間 事前学習期間は本番期間の5日間よりも長いですが、 受講生の方（や私）は試験期間などに重なって進捗を出しづらい 時期もあります。 やはりキャンプの真髄は、皆が集まって集中できる本番期間にあります。</description>
    </item>
    
    <item>
      <title>DNN雑記</title>
      <link>https://maekawatoshiki.github.io/posts/ml/</link>
      <pubDate>Thu, 23 Dec 2021 19:47:09 +0900</pubDate>
      
      <guid>https://maekawatoshiki.github.io/posts/ml/</guid>
      <description>この記事は何？ いきなりDeep Neural Networkの世界に足を踏み入れた人がいろいろ語るだけ あまり細かい話はしない 丸と矢印 深層学習だとかニューラルネットワーク（以下NN）だとか検索すると、以下のような画像をよく見かけると思う。全結合層があって、多分最後の方に活性化関数が挟んである。
入力にデータを流し込んであげると出力を得ることができる、とてもシンプルな構造をしている。
丸と矢印と… しかし、近年実際に使われているDNNはこれほど簡単な構造はしていない。
例えば、以下は文字認識を行うモデル(MNIST1)をONNX2形式としてエクスポートしてnetron3で表示したもの。
一目瞭然だが、先ほどの画像のNNとはだいぶ見た目が違う。丸くないし、いや、でも矢印はある。 丸の代わりに角丸の四角が現れた。矢印の横には謎の数字の列が書いてある。
ぱっと見、グラフ（DAG）であることはわかると思う。
軽く説明すると以下の通り。
角丸の四角: 命令（Operator; ONNX用語？真に受けないでほしい）。命令はデータに対してなんらかの操作を行う。 例えば、上の画像中の Relu はデータの一要素づつ（数値一つ一つ）に ReLU4 を適用する 一方、Conv はデータ全体に対して畳み込み5 を行う 命令ごとに、一要素づつ(element-wise)に操作を行なうのか、部分的に({layer,channel,row,&amp;hellip;}-wise)操作を行なうのか違ってややこしい 矢印: データの流れる方向。データというのは画像だったり文字列だったり… 謎の数字の列: テンソル6のshape。要するにデータがどのような形（のテンソル）なのかを表す。 なんと静的じゃないこともある。画像中ではすべての矢印の横に数字の列（＝shape)が書いてあるが、これは運がいいだけ。shape inference（=shapeを推論する）しても静的に shape が決まらないこともある。でもそのおかげで文字列とか複数のbounding boxを扱えたりする。 より複雑なモデル（画像を分類したりとか）は、もちろんより複雑な構造をしている。netron で表示すると重い。
グラフを計算機が理解するまで DNN はネットワークであり、グラフであり、そのままでは計算機上で動かない。
PyTorch, TensorFlow, Chainer, &amp;hellip; などの機械学習フレームワークは、設計思想の差こそあれ結局はNNモデルを計算機上で実際に動作させるためのものである。そこにはコンパイラと呼べるものが必ずある。いわゆる機械学習コンパイラである。
機械学習コンパイラのやることは、簡単に言えば以下の通りである。
NNモデルのグラフをより簡単な表現に変換する。命令（ノード）同士をくっつけたり分離したり、大胆に順番を入れ替えたり。（数学的に正しくなくてもいい！） 命令の実行順序を決定する。動的に変える場合もある。グラフ中には並列に実行できる命令が含まれるので気を付ける。 CPU, GPU, 独自アクセラレータなどごとに命令列を機械語へ変換。アセンブリを吐いたり、（サボって）LLVMとかOpenCLとかでカーネル吐いたり。CUDAで頑張る？ このあと、CPU, GPU, &amp;hellip; などが複雑に絡み合うヘテロジニアスな環境でどうやって高速にデータを受け渡すか、などの話もあるけどコンパイラの役割じゃない気がしたので省略。
現実 DNN は実際はただのグラフで、そこにデータを流し込んでるだけ。学習時はちょっと違うのかもしれないけど、少なくとも推論時はそう。
計算機をいかに高速に・効率的に動かすかを考えるのは面白い。けど、これが人工知能って呼ばれてるのをみるとなんか微妙な気持ちになるね。
（p.s. DNNの量子化の話聞きたい人いるかな？モデルのパラメータ数を減らしたり、モデル自体を小さくコンパクトにする系の話）
脚注 MNISTデータセット&amp;#160;&amp;#x21a9;&amp;#xfe0e;
Open Neural Network Exchange の略。ここでは ONNX の定める、NNのモデルを表現するためのフォーマットを指す。&amp;#160;&amp;#x21a9;&amp;#xfe0e;</description>
    </item>
    
    <item>
      <title>Google Summer of Code 2021 を終えました</title>
      <link>https://maekawatoshiki.github.io/posts/gsoc3/</link>
      <pubDate>Thu, 09 Sep 2021 00:08:57 +0900</pubDate>
      
      <guid>https://maekawatoshiki.github.io/posts/gsoc3/</guid>
      <description>TL;DR Google Summer of Code 2021 を終えました First, Final Evaluation ともに通りました、という意味 LLVM むずかしい 成果 Google Summer of Code とは 前に書いた記事を参照してください。
何をしたのか 2021/May/20 から 2021/Aug/28 くらいまで、メンターの方たちと共に LLVM へ貢献していました。 （まだマージされていないパッチがあるんですけどね&amp;hellip;）
正確には、コーディングをはじめたのは６月くらいからみたいです。
LLVM? The LLVM Project is a collection of modular and reusable compiler and toolchain technologies. The LLVM Compiler Infrastructure
clang や lld などを傘下に持つ、コンパイラ基盤のプロジェクトです。
（以下 LLVM についてある程度詳しいことを前提として話を進めていきます；またいつか LLVM 自体の解説もしたい）
テーマ 提出した Proposal のタイトルは Utilize LoopNest Pass でした。
Pass というと、Module Pass, Function Pass, Loop Pass, &amp;hellip; など色々あります。 その中に、最近追加されたばかりの LoopNest Pass (New Pass Manager でのみ動作) というものがあります。 これは、ネストしたループを扱うための Pass なのですが、 まだほとんど使われていません（でした）。 私がこの夏にやったことは、LoopNest Pass として実装されている Pass を増やすことです。</description>
    </item>
    
    <item>
      <title>GSoC 2021 の First Evaluation に通りました</title>
      <link>https://maekawatoshiki.github.io/posts/gsoc2/</link>
      <pubDate>Sun, 25 Jul 2021 01:16:16 +0900</pubDate>
      
      <guid>https://maekawatoshiki.github.io/posts/gsoc2/</guid>
      <description>TL;DR Google Summer of Code 2021 の First Evaluation に通りました 2700USD * 0.45 = 1215USD = 13万円くらい貰えました 詳しいこと あとで書きます</description>
    </item>
    
    <item>
      <title>Google Summer of Code 2021 に参加します</title>
      <link>https://maekawatoshiki.github.io/posts/gsoc1/</link>
      <pubDate>Wed, 19 May 2021 15:56:20 +0900</pubDate>
      
      <guid>https://maekawatoshiki.github.io/posts/gsoc1/</guid>
      <description>TL;DR Google Summer of Code に提出したProposalが採択されました 晴れてGSoCに参加できることとなりました 参加団体はLLVMです 嬉しい Google Summer of Codeとは Google Summer of Code is a global program focused on bringing more student developers into open source software development. Students work with an open source organization on a 10 week programming project during their break from school.
(https://summerofcode.withgoogle.com/)
Google Summer of Code は、OSSプロジェクトにメンター付きで参加することができ、さらに Google から報酬ももらえるイベントです。 その名の通り夏（休み）に行われるのですが、アメリカ規準であって、日本の大学などでは普通に授業が行われています。 本来であれば、学部2年生の私にとっては参加が少し厳しいはずでしたが、今年は新型コロナの影響でプロジェクトに取り組む時間の制約が緩くなった (40h/w→17h+/w) ので、思い切って参加してみました。(大学もずっとオンラインで、家にこもりっぱなしですし。)
Proposal採択までの流れ 3月の初めから、以下の作業を始めました。
参加団体を選ぶ 公式サイトを見れば、様々な団体がGSoCに参加しているとわかります。 私は、ずっと LLVM に貢献したかったので、無論それを選びました。
参加プロジェクトを選ぶ 各団体のほぼすべてが、学生向けのプロジェクト一覧を公開しているはずです。LLVM ならここ。 興味のあるプロジェクトは、初めのうちは複数個選んでおいた方がいいと思います。後になって、選んだプロジェクトが想像以上に難しいものだと判明すると、Proposalを書くのが大変ですし、不必要に自分を追い込んでしまいます。</description>
    </item>
    
    <item>
      <title>Play with LLVM-IR, without LLVM</title>
      <link>https://maekawatoshiki.github.io/posts/vicis/</link>
      <pubDate>Sun, 02 May 2021 22:04:08 +0900</pubDate>
      
      <guid>https://maekawatoshiki.github.io/posts/vicis/</guid>
      <description>TL;DR LLVMの代替実装をRustで作っています。(ただの趣味)
これを使って LLVM-IR とじゃれ合ってみよう、という記事です。
LLVM-IRに触れる。LLVM抜きで。 インターネットで放浪してたら、このような記事を見つけました。
RustのLLVM IRでプログラム分析ことはじめ - Toshihiro YAMAGUCHI’s Diary
私はこれまでに、rustcの吐くLLVM-IRを直接見たことがほとんどありませんでした。丁度よい機会なので、LLVMの復習がてら記事と同じようなことをしようとしたのですが、ただ真似るだけでは面白くない。
そうだ、LLVMをRustで実装して、同じようなことをしよう
というわけで、趣味として LLVMをRustで再実装し始めました。(Vicisと名付けた) この記事では Vicis を使って、LLVM-IRを、LLVM抜きで触っていきます。
とりあえずプロジェクトを作る 記事の中では、モジュールに含まれる関数を列挙していました。これと同じことをやってみます。
cargo new viewer --bin # viewerというプロジェクトにします プロジェクトを作ったら、Cargo.tomlにVicisを追加しておきましょう。
... [dependencies] vicis = { path = &amp;#34;/path/to/vicis&amp;#34; } IRを読み込む Vicisは現在、LLVM Assemblyの一部にしか対応できていません。(bitcode対応など頑張ります&amp;hellip;)
src/main.rsを以下のように変更します。
use std::{env, fs::read_to_string}; use vicis::ir::module; fn main() { let args: Vec&amp;lt;String&amp;gt; = env::args().collect(); let file = &amp;amp;args[1]; let asm = read_to_string(file).expect(&amp;#34;failed to read .ll file&amp;#34;); let module = module::parse_assembly(asm.</description>
    </item>
    
    <item>
      <title>コンパイラと私</title>
      <link>https://maekawatoshiki.github.io/posts/compilerandi/</link>
      <pubDate>Thu, 29 Apr 2021 22:42:05 +0900</pubDate>
      
      <guid>https://maekawatoshiki.github.io/posts/compilerandi/</guid>
      <description>ここでは、私がどのようにして「コンパイラ」というものを認識し、そして夢中になったのかについて書いていこうと思う。
私が初めてプログラミングを体験したのは小学6年生のころだった。C言語を使って Hello World を画面（ターミナル、そのころは Windows を使っていたからコマンドプロンプトだった）に表示するという、いたって典型的な入門だった。正直あまり面白くなかったし、そもそもキーボードが打てない、ファイルをどこに保存したのかわからない、というレベルだった。
そんなレベルの私がなぜC言語を始めたかというと、もともと簡単な電子工作をしており、次はロボットを動かしたかったからである。C言語以外の言語を知らなかった私は、親に「猫でもわかるC言語プログラミング」を買ってもらい、どうにか Hello World をコンパイルできる程度の環境を構築したというわけだ。
それ以降の小学6年生の記憶はかなり曖昧だが、たしかある程度C言語を使えるようになり、Win32 APIでウィンドウを表示するサンプルが動いて喜んでいたと思う。同時に、「なぜこの英語の文章（＝プログラム）がウィンドウを表示したりできるんだ？」といった純粋な疑問も持っていた。「コンパイラ」という単語はうっすらと認識していたが、どちらかと言えば「コンパイルして実行」のような連続した語として記憶していたため、まだコンパイラというソフトウェア自体にはあまり興味を示していなかったと思う。
中学1年生になると、すっかりロボットを動かすという目標を忘れ、GUIプログラミングを楽しんでいた。 （物理的にも処理速度的にも）重たいパソコン上で Visual Studio を動かし、C言語を書いていた。F5を押せばプログラムは動いた。そこにコンパイラはなく、その存在は統合開発環境が隠蔽していた。 そのうちに HSP (Hot Soup Processor) を知り、簡単に GUI プログラミングができると興奮し、かなりの数のくだらないソフトウェアを作ったと思う。画面キャプチャ、ただファイルをゴミ箱に送るだけのソフト、画面端で常駐する電卓、円周率を計算するやつ&amp;hellip;..
そう、HSP で円周率を計算し始めたことで気づいた。HSP は遅い。C言語は速かったのに。
そのころになってようやく、世の中にはコンパイル型言語とインタプリタ型言語というものがあると知った。いや、知ったというよりは実感したと言うべきだろうか。とにかく、コンパイラというものに惹かれ始めたのは中学1年生のかなり後半だったと思う。ここから、私とコンパイラとの関係が始まったのだと思う。
最初のうちは、Ruby の VM に興味を持っていた。なぜ Ruby なのかはよく覚えていないが、おそらく英語が読めない私にとって、日本語の資料が落ちていたのは魅力的だったのだろう。YARV の内部構造を説明するサイト（たぶんこのあたり）に釘付けだった。この文章を書きながらリンク先を眺めていたが、今見ても面白い。第3回：命令ディスパッチの話は、当時は理解こそできなかったものの、こんなことができるのか！すごい！と興味津々だった。これが中学2年生の初めの話。
インタプリタやコンパイラのことを認識した以上、何らかの言語を作りたくなるのは避けられない。 （実は HSP で電卓を作っていた頃に、小さな言語のようなものは作っていたが、BASIC よりもしょぼい文法で、AST すら知らなかったためぐちゃぐちゃのコードだったと記憶している。もう手元にはコードが残っていない。そのコードが入っている80GB HDDは分解して、ディスクを手裏剣のように投げて遊んでいた。） 今手元に残っている言語処理系で、一番古いものは Lit だ。いつのまにか C++ を覚えたようで、C++ で書いてあるし、なんとご丁寧にGitHubに置いてある。 まったく思い出せないが、どうにかgitやGitHubの使い方を覚えたようである。最初のコミットは中学2年生の夏休み頃となっている。 Lit は Ruby っぽい言語で、なんと JIT コンパイルできる。初期は手動でアセンブラ（と言っても命令に対応する16進数をハードコードしているだけだが）のようなものを書いており、それを使って JIT していたようだ。結局 LLVM を導入してしまったようだが。そもそもどのような経緯でLLVMを知ったのかも思い出せない。
中学3年生になると、ほとんど理解できていなかったと思われるが、Python や Clang を読んでいたような気がする。また、中学生が終わろうとしているときに、CMake があまりにも嫌いで C++ ごと捨ててしまった。同時に Rust を本格的に使い始めた。</description>
    </item>
    
    <item>
      <title>Third</title>
      <link>https://maekawatoshiki.github.io/posts/third/</link>
      <pubDate>Sun, 28 Feb 2021 23:30:39 +0900</pubDate>
      
      <guid>https://maekawatoshiki.github.io/posts/third/</guid>
      <description></description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://maekawatoshiki.github.io/about/</link>
      <pubDate>Sun, 28 Feb 2021 23:27:03 +0900</pubDate>
      
      <guid>https://maekawatoshiki.github.io/about/</guid>
      <description>$ whoami GitHub: maekawatoshiki (uint256_t) Twitter: uint256_t Mastodon: uint256_t Misskey: @uint256_t@misskey.io Qiita: uint256_t Zenn.dev: uint256_t Graduate student at Nagoya Institute of Technology $ interests I strongly love systems programming, especially making compilers.
$ projects (for Japanese) プログラミング言語処理系が好きな人の集まり − owner vicis − An experimental project to clone LLVM in pure Rust naglfar − A toy web browser implementation from scratch in Rust rapidus − JavaScript engine implementation in Rust sericum (renamed from cilk) − An experimental compiler infrastructure altius − A small runtime for deep neural networks, written in Rust &amp;hellip; and more at GitHub</description>
    </item>
    
    <item>
      <title>Second</title>
      <link>https://maekawatoshiki.github.io/posts/second/</link>
      <pubDate>Sun, 28 Feb 2021 23:26:09 +0900</pubDate>
      
      <guid>https://maekawatoshiki.github.io/posts/second/</guid>
      <description>my second page</description>
    </item>
    
    <item>
      <title>Welcome!!</title>
      <link>https://maekawatoshiki.github.io/posts/welcome/</link>
      <pubDate>Sun, 28 Feb 2021 14:00:00 +0000</pubDate>
      
      <guid>https://maekawatoshiki.github.io/posts/welcome/</guid>
      <description>hello world</description>
    </item>
    
  </channel>
</rss>
